var st = process['hrtime']();
// Generated by psc version 0.6.2
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    function LT() {

    };
    LT.value = new LT();
    function GT() {

    };
    GT.value = new GT();
    function EQ() {

    };
    EQ.value = new EQ();
    function Show(show) {
        this.show = show;
    };
    function Num($percent, $times, $plus, $minus, $div, negate) {
        this["%"] = $percent;
        this["*"] = $times;
        this["+"] = $plus;
        this["-"] = $minus;
        this["/"] = $div;
        this.negate = negate;
    };
    function Eq($div$eq, $eq$eq) {
        this["/="] = $div$eq;
        this["=="] = $eq$eq;
    };
    function Ord(__superclass_Prelude$dotEq_0, compare) {
        this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
        this.compare = compare;
    };
    function showNumberImpl(n) {  return n.toString();};
    function numAdd(n1) {  return function(n2) {    return n1 + n2;  };};
    function numSub(n1) {  return function(n2) {    return n1 - n2;  };};
    function numMul(n1) {  return function(n2) {    return n1 * n2;  };};
    function numDiv(n1) {  return function(n2) {    return n1 / n2;  };};
    function numMod(n1) {  return function(n2) {    return n1 % n2;  };};
    function numNegate(n) {  return -n;};
    function refEq(r1) {  return function(r2) {    return r1 === r2;  };};
    function refIneq(r1) {  return function(r2) {    return r1 !== r2;  };};
    function unsafeCompareImpl(lt) {  return function(eq) {    return function(gt) {      return function(x) {        return function(y) {          return x < y ? lt : x > y ? gt : eq;        };      };    };  };};
    var $minus = function (dict) {
        return dict["-"];
    };
    var unsafeCompare = unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
    var showNumber = new Show(showNumberImpl);
    var show = function (dict) {
        return dict.show;
    };
    var numNumber = new Num(numMod, numMul, numAdd, numSub, numDiv, numNegate);
    var eqNumber = new Eq(refIneq, refEq);
    var ordNumber = new Ord(function () {
        return eqNumber;
    }, unsafeCompare);
    var compare = function (dict) {
        return dict.compare;
    };
    var $less$eq = function (__dict_Ord_12) {
        return function (a1) {
            return function (a2) {
                var _29 = compare(__dict_Ord_12)(a1)(a2);
                if (_29 instanceof GT) {
                    return false;
                };
                return true;
            };
        };
    };
    return {
        "-": $minus, 
        "<=": $less$eq, 
        EQ: EQ, 
        Eq: Eq, 
        GT: GT, 
        LT: LT, 
        Num: Num, 
        Ord: Ord, 
        Show: Show, 
        compare: compare, 
        eqNumber: eqNumber, 
        numNumber: numNumber, 
        ordNumber: ordNumber, 
        refEq: refEq, 
        refIneq: refIneq, 
        show: show, 
        showNumber: showNumber
    };
})();
var PS = PS || {};
PS.Debug_Trace = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function trace(s) {  return function() {    console.log(s);    return {};  };};
    var print = function (__dict_Show_16) {
        return function (o) {
            return trace(Prelude.show(__dict_Show_16)(o));
        };
    };
    return {
        print: print, 
        trace: trace
    };
})();
var PS = PS || {};
PS.Main = (function () {
    "use strict";
    var Debug_Trace = PS.Debug_Trace;
    var Prelude = PS.Prelude;
    var tarai$prime = function (x) {
        return function (y) {
            return function (z) {
                return x <= y ? y : tarai(tarai(x - 1)(y)(z))(tarai(y - 1)(z)(x))(tarai(z - 1)(x)(y));
            };
        };
    };
    var tarai = function (x) {
        return function (y) {
            return function (z) {
                return tarai$prime(x)(y)(z);
            };
        };
    };
    var main = Debug_Trace.print(Prelude.showNumber)(tarai(11)(5)(0));
    return {
        main: main, 
        tarai: tarai, 
        "tarai'": tarai$prime
    };
})();
PS.Main.main();
var diff = process['hrtime'](st);

console['warn'](diff[0] * 1e9 + diff[1]);
